const std = @import("std");
const c8 = @import("chip8.zig");
const debug = std.debug;
const mem = std.mem;

const Memory = c8.memory.Memory;
const Addr = c8.memory.Addr;
const Inst = c8.inst.Inst;

pub const FONT_MEM_LEN = 80;
pub const FONT_START = 0x050;
pub const FONT_END = 0x0a0;

pub const font_chars = [FONT_MEM_LEN]u8{
    0xf0, 0x90, 0x90, 0x90, 0xf0, // 0
    0x20, 0x60, 0x20, 0x20, 0x70, // 1
    0xf0, 0x10, 0xf0, 0x80, 0xf0, // 2
    0xf0, 0x10, 0xf0, 0x10, 0xf0, // 3
    0x90, 0x90, 0xf0, 0x10, 0x10, // 4
    0xf0, 0x80, 0xf0, 0x10, 0xf0, // 5
    0xf0, 0x80, 0xf0, 0x90, 0xf0, // 6
    0xf0, 0x10, 0x20, 0x40, 0x40, // 7
    0xf0, 0x90, 0xf0, 0x90, 0xf0, // 8
    0xf0, 0x90, 0xf0, 0x10, 0xf0, // 9
    0xf0, 0x90, 0xf0, 0x90, 0x90, // A
    0xe0, 0x90, 0xe0, 0x90, 0xe0, // B
    0xf0, 0x80, 0x80, 0x80, 0xf0, // C
    0xe0, 0x90, 0x90, 0x90, 0xe0, // D
    0xf0, 0x80, 0xf0, 0x80, 0xf0, // E
    0xf0, 0x80, 0xf0, 0x80, 0x80, // F
};

pub const char_map: [16]u12 = .{
    FONT_START, // 0
    FONT_START + 5,
    FONT_START + 10,
    FONT_START + 15,
    FONT_START + 20,
    FONT_START + 25,
    FONT_START + 30,
    FONT_START + 35,
    FONT_START + 40,
    FONT_START + 45,
    FONT_START + 50, // a
    FONT_START + 55,
    FONT_START + 60,
    FONT_START + 65,
    FONT_START + 70,
    FONT_START + 75, // f
};

pub fn setFont(ram: *Memory, charset: []const u8) void {
    debug.assert(ram.len == c8.memory.TOTAL_MEM);
    const font_space = ram[FONT_START..FONT_END];
    @memcpy(font_space, charset);
}

pub fn charAddrOffset(char: comptime_int) Addr {
    return FONT_START + char * 5;
}
